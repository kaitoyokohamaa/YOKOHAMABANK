{"ast":null,"code":"var _jsxFileName = \"/Users/yoko/Desktop/YOKOHAMABANK/src/pages/Home/tabelContentsMoney.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport styles from \"./tabel.module.css\";\nimport { useGetUid } from \"../../functions/useGetUid\";\nimport firebase from \"../../config/firebase\";\nexport default function TabelContentsArea(props) {\n  _s();\n\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(true);\n  const {\n    0: isHover,\n    1: setIsHover\n  } = useState(false);\n  const {\n    0: getBankID,\n    1: setGetBankID\n  } = useState();\n  const {\n    0: changedMoney,\n    1: setChangedMoney\n  } = useState(props.money);\n  const {\n    0: getUserFiledsID,\n    1: setGetUserFiledsID\n  } = useState();\n  const [functions] = useGetUid();\n  const currentUserId = functions.currentUserId;\n  const ref = firebase.firestore().collection(\"User\");\n  useEffect(() => {\n    let useBankID;\n    ref.onSnapshot(usersDocs => {\n      usersDocs.forEach(contens => {\n        if (contens.data().userID[0].includes(currentUserId)) {\n          const bankID = contens.id;\n          useBankID = contens.id;\n          setGetBankID(bankID);\n        }\n      });\n    });\n  }, [currentUserId]); // 自分がアップデートしたい箇所IDを取得する\n\n  useEffect(() => {\n    if (getBankID) {\n      ref.doc(getBankID).collection(\"bank\").onSnapshot(async userDocs => {\n        await userDocs.forEach(userContents => {\n          if (userContents.data().id === props.id) {\n            setGetUserFiledsID(userContents.id);\n          }\n        });\n      });\n    }\n  }, [getBankID]);\n\n  const handleClick = () => {\n    ref.doc(getBankID).collection(\"bank\").doc(getUserFiledsID).update({\n      money: changedMoney\n    });\n    setIsHover(false);\n    setTimeout(() => {\n      setIsEditing(true);\n    }, 1000);\n  };\n\n  return isEditing ? __jsx(React.Fragment, null, __jsx(\"th\", {\n    onMouseEnter: () => setIsHover(true),\n    onMouseLeave: () => setIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, props.type === \"exp\" ? __jsx(\"span\", {\n    className: styles.exp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"-\", props.money) : __jsx(\"span\", {\n    className: styles.inc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, props.money), isHover && __jsx(EditOutlined, {\n    onClick: () => setIsEditing(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }))) : __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    autoFocus: true,\n    type: \"number\",\n    onChange: e => setChangedMoney(Number(e.target.value)),\n    value: changedMoney,\n    className: styles.styledInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    className: styles.styledButton,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"\\u4FDD\\u5B58\"));\n}\n\n_s(TabelContentsArea, \"sxjpL2/JtsxEYyDXFhWznVA7TbM=\", false, function () {\n  return [useGetUid];\n});\n\n_c = TabelContentsArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabelContentsArea\");","map":{"version":3,"sources":["/Users/yoko/Desktop/YOKOHAMABANK/src/pages/Home/tabelContentsMoney.tsx"],"names":["React","useState","useEffect","EditOutlined","styles","useGetUid","firebase","TabelContentsArea","props","isEditing","setIsEditing","isHover","setIsHover","getBankID","setGetBankID","changedMoney","setChangedMoney","money","getUserFiledsID","setGetUserFiledsID","functions","currentUserId","ref","firestore","collection","useBankID","onSnapshot","usersDocs","forEach","contens","data","userID","includes","bankID","id","doc","userDocs","userContents","handleClick","update","setTimeout","type","exp","inc","e","Number","target","value","styledInput","styledButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport styles from \"./tabel.module.css\";\nimport { useGetUid } from \"../../functions/useGetUid\";\nimport firebase from \"../../config/firebase\";\nexport default function TabelContentsArea(props: {\n  money: number;\n  id: string;\n  type: string;\n}) {\n  const [isEditing, setIsEditing] = useState<boolean>(true);\n  const [isHover, setIsHover] = useState<boolean>(false);\n  const [getBankID, setGetBankID] = useState<string>();\n  const [changedMoney, setChangedMoney] = useState<number>(props.money);\n  const [getUserFiledsID, setGetUserFiledsID] = useState<string>();\n  const [functions] = useGetUid();\n  const currentUserId = functions.currentUserId;\n  const ref = firebase.firestore().collection(\"User\");\n  useEffect(() => {\n    let useBankID: string;\n    ref.onSnapshot((usersDocs) => {\n      usersDocs.forEach((contens) => {\n        if (contens.data().userID[0].includes(currentUserId)) {\n          const bankID = contens.id;\n          useBankID = contens.id;\n          setGetBankID(bankID);\n        }\n      });\n    });\n  }, [currentUserId]);\n\n  // 自分がアップデートしたい箇所IDを取得する\n  useEffect(() => {\n    if (getBankID) {\n      ref\n        .doc(getBankID)\n        .collection(\"bank\")\n        .onSnapshot(async (userDocs: firebase.firestore.DocumentData) => {\n          await userDocs.forEach(\n            (userContents: firebase.firestore.DocumentData) => {\n              if (userContents.data().id === props.id) {\n                setGetUserFiledsID(userContents.id);\n              }\n            }\n          );\n        });\n    }\n  }, [getBankID]);\n\n  const handleClick = () => {\n    ref\n      .doc(getBankID)\n      .collection(\"bank\")\n      .doc(getUserFiledsID)\n      .update({ money: changedMoney });\n    setIsHover(false);\n    setTimeout(() => {\n      setIsEditing(true);\n    }, 1000);\n  };\n\n  return isEditing ? (\n    <>\n      <th\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        {props.type === \"exp\" ? (\n          <span className={styles.exp}>-{props.money}</span>\n        ) : (\n          <span className={styles.inc}>{props.money}</span>\n        )}\n\n        {isHover && <EditOutlined onClick={() => setIsEditing(false)} />}\n      </th>\n    </>\n  ) : (\n    <th>\n      <input\n        autoFocus\n        type=\"number\"\n        onChange={(e) => setChangedMoney(Number(e.target.value))}\n        value={changedMoney}\n        className={styles.styledInput}\n      />\n      <button className={styles.styledButton} onClick={handleClick}>\n        保存\n      </button>\n    </th>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}