{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport firebase from \"../config/firebase\";\nexport function useFunctions() {\n  _s();\n\n  const {\n    0: budget,\n    1: setBudget\n  } = useState();\n  const {\n    0: income,\n    1: setIncome\n  } = useState();\n  const {\n    0: expence,\n    1: setExpence\n  } = useState();\n  const {\n    0: totalBudget,\n    1: setTotalBudget\n  } = useState();\n  const {\n    0: currentUserId,\n    1: setCurrentUserId\n  } = useState();\n  const {\n    0: bankID,\n    1: setbankID\n  } = useState();\n  const d = new Date();\n  const month = d.getMonth() + 1;\n  const ref = firebase.firestore().collection(\"User\");\n\n  const reducer = (sum, currentValue) => sum + currentValue; // 自分のユーザー登録をしているDocsの取得\n\n\n  useEffect(() => {\n    return firebase.auth().onAuthStateChanged(async usr => {\n      if (!usr) {} else {\n        // 今ログインをしている人のuidを確認する→このuidを元に自分の登録した中身を参照する。\n        const myUid = usr.uid;\n        setCurrentUserId(myUid); // 自分のuidを参考にdocIDの取得\n\n        ref.where(\"userID\", \"array-contains\", myUid).onSnapshot(querySnapshot => {\n          querySnapshot.forEach(bankFields => {\n            setbankID(bankFields.id);\n          });\n        });\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (bankID) {\n      // 自分が保存した中身を取得する。\n      ref.doc(bankID).collection(\"bank\").orderBy(\"createdAt\", \"desc\").onSnapshot(querySnapshot => {\n        let storeBudget = [];\n        let storeIncome = [];\n        let storeExpence = [];\n        querySnapshot.forEach(docs => {\n          const showBudget = docs.data();\n          storeBudget.push(showBudget); //収入の中身を足す\n\n          if (showBudget.type === \"inc\" && showBudget.day.toDate().getMonth() + 1 === month) {\n            const incomeMoney = showBudget.money;\n            storeIncome.push(incomeMoney);\n            const sumMoney = storeIncome.reduce(reducer); //足された収入の中身をstateで管理\n\n            setIncome(sumMoney);\n          } //支出の中身を足す\n          else if (showBudget.type === \"exp\" && showBudget.day.toDate().getMonth() + 1 === month) {\n              const expenceMoney = showBudget.money;\n              storeExpence.push(expenceMoney);\n              const decMoney = storeExpence.reduce(reducer); //足された支出の中身をstateで管理\n\n              setExpence(decMoney);\n            }\n        });\n\n        if (storeBudget) {\n          setBudget(storeBudget);\n        }\n      });\n    }\n  }, [bankID]); // 収入と支出を足す\n\n  useEffect(() => {\n    if (income && expence) {\n      setTotalBudget(income - expence);\n    }\n  }, [income, expence]);\n  return [{\n    bankID,\n    totalBudget,\n    income,\n    expence,\n    budget,\n    setBudget,\n    setExpence,\n    currentUserId\n  }];\n}\n\n_s(useFunctions, \"q2dEuGR1QKFS16K54TTsX3sEg2g=\");","map":{"version":3,"sources":["/Users/yoko/Desktop/YOKOHAMABANK/src/functions/useFunctions.tsx"],"names":["useState","useEffect","firebase","useFunctions","budget","setBudget","income","setIncome","expence","setExpence","totalBudget","setTotalBudget","currentUserId","setCurrentUserId","bankID","setbankID","d","Date","month","getMonth","ref","firestore","collection","reducer","sum","currentValue","auth","onAuthStateChanged","usr","myUid","uid","where","onSnapshot","querySnapshot","forEach","bankFields","id","doc","orderBy","storeBudget","storeIncome","storeExpence","docs","showBudget","data","push","type","day","toDate","incomeMoney","money","sumMoney","reduce","expenceMoney","decMoney"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport firebase from \"../config/firebase\";\n\nexport function useFunctions() {\n  const [budget, setBudget] = useState<firebase.firestore.DocumentData>();\n  const [income, setIncome] = useState<number>();\n  const [expence, setExpence] = useState<number>();\n  const [totalBudget, setTotalBudget] = useState<number>();\n  const [currentUserId, setCurrentUserId] = useState<number | string>();\n  const [bankID, setbankID] = useState<string>();\n  const d = new Date();\n  const month = d.getMonth() + 1;\n  const ref = firebase.firestore().collection(\"User\");\n\n  const reducer = (sum: number, currentValue: number) => sum + currentValue;\n  // 自分のユーザー登録をしているDocsの取得\n  useEffect(() => {\n    return firebase\n      .auth()\n      .onAuthStateChanged(async (usr: firebase.User | null) => {\n        if (!usr) {\n        } else {\n          // 今ログインをしている人のuidを確認する→このuidを元に自分の登録した中身を参照する。\n          const myUid = usr.uid;\n          setCurrentUserId(myUid);\n          // 自分のuidを参考にdocIDの取得\n          ref\n            .where(\"userID\", \"array-contains\", myUid)\n            .onSnapshot((querySnapshot: firebase.firestore.QuerySnapshot) => {\n              querySnapshot.forEach((bankFields) => {\n                setbankID(bankFields.id);\n              });\n            });\n        }\n      });\n  }, []);\n\n  useEffect(() => {\n    if (bankID) {\n      // 自分が保存した中身を取得する。\n      ref\n        .doc(bankID)\n        .collection(\"bank\")\n        .orderBy(\"createdAt\", \"desc\")\n        .onSnapshot((querySnapshot: firebase.firestore.DocumentData) => {\n          let storeBudget: firebase.firestore.DocumentData[] = [];\n          let storeIncome: number[] = [];\n          let storeExpence: number[] = [];\n          querySnapshot.forEach((docs: firebase.firestore.DocumentData) => {\n            const showBudget = docs.data();\n            storeBudget.push(showBudget);\n\n            //収入の中身を足す\n            if (\n              showBudget.type === \"inc\" &&\n              showBudget.day.toDate().getMonth() + 1 === month\n            ) {\n              const incomeMoney: number = showBudget.money;\n              storeIncome.push(incomeMoney);\n              const sumMoney = storeIncome.reduce(reducer);\n              //足された収入の中身をstateで管理\n              setIncome(sumMoney);\n            }\n            //支出の中身を足す\n            else if (\n              showBudget.type === \"exp\" &&\n              showBudget.day.toDate().getMonth() + 1 === month\n            ) {\n              const expenceMoney: number = showBudget.money;\n              storeExpence.push(expenceMoney);\n              const decMoney = storeExpence.reduce(reducer);\n              //足された支出の中身をstateで管理\n              setExpence(decMoney);\n            }\n          });\n\n          if (storeBudget) {\n            setBudget(storeBudget);\n          }\n        });\n    }\n  }, [bankID]);\n\n  // 収入と支出を足す\n  useEffect(() => {\n    if (income && expence) {\n      setTotalBudget(income - expence);\n    }\n  }, [income, expence]);\n\n  return [\n    {\n      bankID,\n      totalBudget,\n      income,\n      expence,\n      budget,\n      setBudget,\n      setExpence,\n      currentUserId,\n    },\n  ] as const;\n}\n"]},"metadata":{},"sourceType":"module"}