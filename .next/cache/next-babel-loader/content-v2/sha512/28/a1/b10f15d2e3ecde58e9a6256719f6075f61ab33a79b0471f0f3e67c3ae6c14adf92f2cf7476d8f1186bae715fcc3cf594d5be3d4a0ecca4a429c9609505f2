{"ast":null,"code":"var _jsxFileName = \"/Users/yoko/Desktop/YOKOHAMABANK/src/pages/Home/tabelContentsDay.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport styles from \"./tabel.module.css\";\nimport { useGetUid } from \"../../functions/useGetUid\";\nimport firebase from \"../../config/firebase\";\nimport DatePicker from \"react-datepicker\";\nexport default function TabelContentsArea(props) {\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(true);\n  const {\n    0: isHover,\n    1: setIsHover\n  } = useState(false);\n  const {\n    0: getBankID,\n    1: setGetBankID\n  } = useState();\n  const {\n    0: changedDay,\n    1: setChangedDay\n  } = useState();\n  const {\n    0: getUserFiledsID,\n    1: setGetUserFiledsID\n  } = useState();\n  const [functions] = useGetUid();\n  const currentUserId = functions.currentUserId;\n  const ref = firebase.firestore().collection(\"User\");\n\n  const dateChange = date => {\n    const detailDate = date;\n    setChangedDay(detailDate);\n  };\n\n  useEffect(() => {\n    let useBankID;\n    ref.onSnapshot(usersDocs => {\n      usersDocs.forEach(contens => {\n        if (contens.data().userID[0].includes(currentUserId)) {\n          const bankID = contens.id;\n          useBankID = contens.id;\n          setGetBankID(bankID);\n        }\n      });\n    });\n  }, [currentUserId]);\n  useEffect(() => {\n    if (getBankID) {\n      ref.doc(getBankID).collection(\"bank\").onSnapshot(async userDocs => {\n        await userDocs.forEach(userContents => {\n          if (userContents.data().id === props.id) {\n            setGetUserFiledsID(userContents.id);\n          }\n        });\n      });\n    }\n  }, [getBankID]);\n\n  const handleClick = () => {\n    ref.doc(getBankID).collection(\"bank\").doc(getUserFiledsID).update({\n      day: changedDay\n    });\n    setIsHover(false); // 保存完了\n\n    setTimeout(() => {\n      setIsEditing(true);\n    }, 1000);\n  };\n\n  return isEditing ? __jsx(React.Fragment, null, __jsx(\"th\", {\n    onMouseEnter: () => setIsHover(true),\n    onMouseLeave: () => setIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, props.day, isHover && __jsx(EditOutlined, {\n    onClick: () => setIsEditing(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }))) : __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(DatePicker, {\n    required: true,\n    onChange: dateChange,\n    className: styles.calendar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    className: styles.styledButton,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"\\u4FDD\\u5B58\"));\n}","map":{"version":3,"sources":["/Users/yoko/Desktop/YOKOHAMABANK/src/pages/Home/tabelContentsDay.tsx"],"names":["React","useState","useEffect","EditOutlined","styles","useGetUid","firebase","DatePicker","TabelContentsArea","props","isEditing","setIsEditing","isHover","setIsHover","getBankID","setGetBankID","changedDay","setChangedDay","getUserFiledsID","setGetUserFiledsID","functions","currentUserId","ref","firestore","collection","dateChange","date","detailDate","useBankID","onSnapshot","usersDocs","forEach","contens","data","userID","includes","bankID","id","doc","userDocs","userContents","handleClick","update","day","setTimeout","calendar","styledButton"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAA+D;AAC5E,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,EAA1C;AACA,QAAM;AAAA,OAACe,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,EAA5C;AACA,QAAM;AAAA,OAACiB,eAAD;AAAA,OAAkBC;AAAlB,MAAwClB,QAAQ,EAAtD;AACA,QAAM,CAACmB,SAAD,IAAcf,SAAS,EAA7B;AACA,QAAMgB,aAAa,GAAGD,SAAS,CAACC,aAAhC;AACA,QAAMC,GAAG,GAAGhB,QAAQ,CAACiB,SAAT,GAAqBC,UAArB,CAAgC,MAAhC,CAAZ;;AAEA,QAAMC,UAAU,GAAIC,IAAD,IAAgB;AACjC,UAAMC,UAAU,GAAGD,IAAnB;AACAT,IAAAA,aAAa,CAACU,UAAD,CAAb;AACD,GAHD;;AAKAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,SAAJ;AACAN,IAAAA,GAAG,CAACO,UAAJ,CAAgBC,SAAD,IAAe;AAC5BA,MAAAA,SAAS,CAACC,OAAV,CAAmBC,OAAD,IAAa;AAC7B,YAAIA,OAAO,CAACC,IAAR,GAAeC,MAAf,CAAsB,CAAtB,EAAyBC,QAAzB,CAAkCd,aAAlC,CAAJ,EAAsD;AACpD,gBAAMe,MAAM,GAAGJ,OAAO,CAACK,EAAvB;AACAT,UAAAA,SAAS,GAAGI,OAAO,CAACK,EAApB;AACAtB,UAAAA,YAAY,CAACqB,MAAD,CAAZ;AACD;AACF,OAND;AAOD,KARD;AASD,GAXQ,EAWN,CAACf,aAAD,CAXM,CAAT;AAaAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,SAAJ,EAAe;AACbQ,MAAAA,GAAG,CACAgB,GADH,CACOxB,SADP,EAEGU,UAFH,CAEc,MAFd,EAGGK,UAHH,CAGc,MAAOU,QAAP,IAAqD;AAC/D,cAAMA,QAAQ,CAACR,OAAT,CACHS,YAAD,IAAmD;AACjD,cAAIA,YAAY,CAACP,IAAb,GAAoBI,EAApB,KAA2B5B,KAAK,CAAC4B,EAArC,EAAyC;AACvClB,YAAAA,kBAAkB,CAACqB,YAAY,CAACH,EAAd,CAAlB;AACD;AACF,SALG,CAAN;AAOD,OAXH;AAYD;AACF,GAfQ,EAeN,CAACvB,SAAD,CAfM,CAAT;;AAiBA,QAAM2B,WAAW,GAAG,MAAM;AACxBnB,IAAAA,GAAG,CACAgB,GADH,CACOxB,SADP,EAEGU,UAFH,CAEc,MAFd,EAGGc,GAHH,CAGOpB,eAHP,EAIGwB,MAJH,CAIU;AAAEC,MAAAA,GAAG,EAAE3B;AAAP,KAJV;AAKAH,IAAAA,UAAU,CAAC,KAAD,CAAV,CANwB,CAOxB;;AACA+B,IAAAA,UAAU,CAAC,MAAM;AACfjC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAXD;;AAYA,SAAOD,SAAS,GACd,4BACE;AACE,IAAA,YAAY,EAAE,MAAMG,UAAU,CAAC,IAAD,CADhC;AAEE,IAAA,YAAY,EAAE,MAAMA,UAAU,CAAC,KAAD,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGJ,KAAK,CAACkC,GAJT,EAKG/B,OAAO,IAAI,MAAC,YAAD;AAAc,IAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,KAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALd,CADF,CADc,GAWd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,QAAQ,MAApB;AAAqB,IAAA,QAAQ,EAAEc,UAA/B;AAA2C,IAAA,SAAS,EAAErB,MAAM,CAACyC,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,SAAS,EAAEzC,MAAM,CAAC0C,YAA1B;AAAwC,IAAA,OAAO,EAAEL,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CAXF;AAkBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport styles from \"./tabel.module.css\";\nimport { useGetUid } from \"../../functions/useGetUid\";\nimport firebase from \"../../config/firebase\";\nimport DatePicker from \"react-datepicker\";\nexport default function TabelContentsArea(props: { day: string; id: string }) {\n  const [isEditing, setIsEditing] = useState<boolean>(true);\n  const [isHover, setIsHover] = useState<boolean>(false);\n  const [getBankID, setGetBankID] = useState<string>();\n  const [changedDay, setChangedDay] = useState<Date>();\n  const [getUserFiledsID, setGetUserFiledsID] = useState<string>();\n  const [functions] = useGetUid();\n  const currentUserId = functions.currentUserId;\n  const ref = firebase.firestore().collection(\"User\");\n\n  const dateChange = (date: Date) => {\n    const detailDate = date;\n    setChangedDay(detailDate);\n  };\n\n  useEffect(() => {\n    let useBankID: string;\n    ref.onSnapshot((usersDocs) => {\n      usersDocs.forEach((contens) => {\n        if (contens.data().userID[0].includes(currentUserId)) {\n          const bankID = contens.id;\n          useBankID = contens.id;\n          setGetBankID(bankID);\n        }\n      });\n    });\n  }, [currentUserId]);\n\n  useEffect(() => {\n    if (getBankID) {\n      ref\n        .doc(getBankID)\n        .collection(\"bank\")\n        .onSnapshot(async (userDocs: firebase.firestore.DocumentData) => {\n          await userDocs.forEach(\n            (userContents: firebase.firestore.DocumentData) => {\n              if (userContents.data().id === props.id) {\n                setGetUserFiledsID(userContents.id);\n              }\n            }\n          );\n        });\n    }\n  }, [getBankID]);\n\n  const handleClick = () => {\n    ref\n      .doc(getBankID)\n      .collection(\"bank\")\n      .doc(getUserFiledsID)\n      .update({ day: changedDay });\n    setIsHover(false);\n    // 保存完了\n    setTimeout(() => {\n      setIsEditing(true);\n    }, 1000);\n  };\n  return isEditing ? (\n    <>\n      <th\n        onMouseEnter={() => setIsHover(true)}\n        onMouseLeave={() => setIsHover(false)}\n      >\n        {props.day}\n        {isHover && <EditOutlined onClick={() => setIsEditing(false)} />}\n      </th>\n    </>\n  ) : (\n    <th>\n      <DatePicker required onChange={dateChange} className={styles.calendar} />\n      <button className={styles.styledButton} onClick={handleClick}>\n        保存\n      </button>\n    </th>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}