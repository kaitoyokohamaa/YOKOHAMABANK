{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/mybank/src/contexts/Authcontexts/index.tsx\";\nimport React from \"react\";\nimport { app } from \"../../firebase\";\n// contextの作成\nexport const AuthContext = React.createContext({\n  login: () => void 0,\n  signup: () => void 0\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  // const [currentUser, setCurrentUser] = useState(null);\n  // ユーザーをログインさせる関数\n  const login = async (email, password, history) => {\n    try {\n      await app.auth().signInWithEmailAndPassword(email, password);\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  }; // 新しいユーザーを作成しログインさせる関数\n\n\n  const signup = async (email, password, history) => {\n    try {\n      await app.auth().createUserWithEmailAndPassword(email, password);\n      alert(\"so\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  }; // 後ほど対応\n  // useEffect(() => {\n  //     app.auth().onAuthStateChanged(setCurrentUser);\n  // }, []);\n\n\n  return (\n    /*#__PURE__*/\n    // Contextを使用して認証に必要な情報をコンポーネントツリーに流し込む。\n    React.createElement(AuthContext.Provider, {\n      value: {\n        login: login,\n        signup: signup\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, children)\n  );\n};","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/mybank/src/contexts/Authcontexts/index.tsx"],"names":["React","app","AuthContext","createContext","login","signup","AuthProvider","children","email","password","history","auth","signInWithEmailAndPassword","push","error","alert","createUserWithEmailAndPassword"],"mappings":";AAAA,OAAOA,KAAP,MAAkE,OAAlE;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAMA;AACA,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,CAAyC;AAAEC,EAAAA,KAAK,EAAE,MAAM,KAAK,CAApB;AAAuBC,EAAAA,MAAM,EAAE,MAAM,KAAK;AAA1C,CAAzC,CAApB;AAEP,OAAO,MAAMC,YAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C;AAEA;AACA,QAAMH,KAAK,GAAG,OAAOI,KAAP,EAAsBC,QAAtB,EAAwCC,OAAxC,KAA+D;AACzE,QAAI;AACA,YAAMT,GAAG,CAACU,IAAJ,GAAWC,0BAAX,CAAsCJ,KAAtC,EAA6CC,QAA7C,CAAN;AACAC,MAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GAPD,CAJ8C,CAa9C;;;AACA,QAAMT,MAAM,GAAG,OAAOG,KAAP,EAAsBC,QAAtB,EAAwCC,OAAxC,KAA+D;AAC1E,QAAI;AACA,YAAMT,GAAG,CAACU,IAAJ,GAAWK,8BAAX,CAA0CR,KAA1C,EAAiDC,QAAjD,CAAN;AACAM,MAAAA,KAAK,CAAC,IAAD,CAAL;AACAL,MAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACH,KAJD,CAIE,OAAOC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GARD,CAd8C,CAuB9C;AACA;AACA;AACA;;;AAEA;AAAA;AACI;AACA,wBAAC,WAAD,CAAa,QAAb;AACI,MAAA,KAAK,EAAE;AACHV,QAAAA,KAAK,EAAEA,KADJ;AAEHC,QAAAA,MAAM,EAAEA;AAFL,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMKE,QANL;AAFJ;AAWH,CAvCM","sourcesContent":["import React, { useEffect, useState, FC, Dispatch, Reducer } from \"react\";\n\nimport { app } from \"../../firebase\"\nimport * as H from 'history'\nexport interface AccountContextValue {\n    login: (email: string, password: string, history: H.History) => Promise<void> | undefined,\n    signup: (email: string, password: string, history: H.History) => Promise<void> | undefined\n}\n// contextの作成\nexport const AuthContext = React.createContext<AccountContextValue>({ login: () => void 0, signup: () => void 0 });\n\nexport const AuthProvider: FC = ({ children }) => {\n    // const [currentUser, setCurrentUser] = useState(null);\n\n    // ユーザーをログインさせる関数\n    const login = async (email: string, password: string, history: H.History) => {\n        try {\n            await app.auth().signInWithEmailAndPassword(email, password);\n            history.push(\"/\");\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    // 新しいユーザーを作成しログインさせる関数\n    const signup = async (email: string, password: string, history: H.History) => {\n        try {\n            await app.auth().createUserWithEmailAndPassword(email, password);\n            alert(\"so\")\n            history.push(\"/\");\n        } catch (error) {\n            alert(error);\n        }\n    };\n    // 後ほど対応\n    // useEffect(() => {\n    //     app.auth().onAuthStateChanged(setCurrentUser);\n    // }, []);\n\n    return (\n        // Contextを使用して認証に必要な情報をコンポーネントツリーに流し込む。\n        <AuthContext.Provider\n            value={{\n                login: login,\n                signup: signup,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}