{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/mybank/src/components/pages/Signup/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../../atoms/Input/Input\";\nimport \"./Account.css\";\nimport Account from \"./AccuntCreationComponent\";\nimport * as firebase from \"firebase/app\";\nimport { profile } from \"../../../../rest/profile/api\";\nimport { useAccount } from \"../../../../contexts/AccountContext\";\n\nconst AccountCreation = () => {\n  const account = useAccount();\n  const history = useHistory();\n  const [Namevalid, setNamevalid] = useState(false);\n  const [Emailvalid, setEmailvalid] = useState(false);\n  const [Passwordvalid, setPasswordvalid] = useState(false);\n  const [Loading, setLoading] = useState(false);\n  const [err, Seterr] = useState(\"\");\n  const [authForm, setAuthForm] = useState({\n    ComapanyName: {\n      elementType: \"comapanyname\",\n      elementConfig: {\n        type: \"input\",\n        placeholder: \"株式会社AilaB\",\n        label: \"会社名\"\n      },\n      value: \"\"\n    },\n    Email: {\n      elementType: \"email\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"tanakataro@rebase.co.jp\",\n        label: \"メールアドレス\"\n      },\n      value: \"\"\n    },\n    Password: {\n      elementType: \"password\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"qwerty\",\n        label: \"パスワード\"\n      },\n      value: \"\"\n    },\n    checkbox: {\n      elementType: \"checkbox\",\n      elementConfig: {\n        type: \"checkbox\"\n      },\n      value: \"\"\n    }\n  });\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: authForm[controlName].validation,\n        id: controlName\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: formElement.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    rowkey: formElement.id,\n    namevalid: Namevalid,\n    emailvalid: Emailvalid,\n    passwordvalid: Passwordvalid,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  })));\n  let user = firebase.auth().currentUser;\n\n  const submit = e => {\n    authForm.ComapanyName.value === \"\" ? setNamevalid(true) : setNamevalid(false);\n    authForm.Email.value === \"\" ? setEmailvalid(true) : setEmailvalid(false);\n    authForm.Password.value === \"\" ? setPasswordvalid(true) : setPasswordvalid(false);\n    setLoading(true);\n    e.preventDefault();\n    const email = authForm.Email.value;\n    const password = authForm.Password.value;\n    const name = authForm.ComapanyName.value;\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(res => {\n      var _user;\n\n      user = firebase.auth().currentUser;\n      var initIcon = \"https://storage.googleapis.com/rebase-1/card-NoImage.png\";\n      window.localStorage.setItem(\"id\", res.user.uid);\n      (_user = user) === null || _user === void 0 ? void 0 : _user.updateProfile({\n        displayName: name,\n        photoURL: initIcon\n      }).then(() => {\n        var _firebase$auth$curren;\n\n        (_firebase$auth$curren = firebase.auth().currentUser) === null || _firebase$auth$curren === void 0 ? void 0 : _firebase$auth$curren.getIdToken().then(idToken => {\n          const Mytoken = idToken;\n          return profile.fetchProfile(Mytoken, name, email).then(res => {\n            account.setProfileRegistered(true);\n            history.push(\"/tags\");\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    }).catch(err => {\n      setLoading(false);\n      Seterr(\"新規登録に失敗しました\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Account, {\n    form: form,\n    submit: submit,\n    Loading: Loading,\n    err: err,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default AccountCreation;","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/mybank/src/components/pages/Signup/index.tsx"],"names":["React","useState","useHistory","Input","Account","firebase","profile","useAccount","AccountCreation","account","history","Namevalid","setNamevalid","Emailvalid","setEmailvalid","Passwordvalid","setPasswordvalid","Loading","setLoading","err","Seterr","authForm","setAuthForm","ComapanyName","elementType","elementConfig","type","placeholder","label","value","Email","Password","checkbox","inputChangedHandler","event","controlName","updatedControls","target","valid","validation","id","formElementsArray","key","push","config","form","map","formElement","user","auth","currentUser","submit","e","preventDefault","email","password","name","createUserWithEmailAndPassword","then","res","initIcon","window","localStorage","setItem","uid","updateProfile","displayName","photoURL","getIdToken","idToken","Mytoken","fetchProfile","setProfileRegistered","catch","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../../atoms/Input/Input\";\nimport \"./Account.css\";\nimport Account from \"./AccuntCreationComponent\";\nimport * as firebase from \"firebase/app\";\nimport { profile } from \"../../../../rest/profile/api\";\nimport { useAccount } from \"../../../../contexts/AccountContext\";\n\nconst AccountCreation: React.FC = () => {\n    const account = useAccount();\n    const history = useHistory();\n    const [Namevalid, setNamevalid] = useState(false);\n    const [Emailvalid, setEmailvalid] = useState(false);\n    const [Passwordvalid, setPasswordvalid] = useState(false);\n    const [Loading, setLoading] = useState(false);\n    const [err, Seterr] = useState(\"\");\n    const [authForm, setAuthForm] = useState({\n        ComapanyName: {\n            elementType: \"comapanyname\",\n            elementConfig: {\n                type: \"input\",\n                placeholder: \"株式会社AilaB\",\n                label: \"会社名\",\n            },\n            value: \"\",\n        },\n        Email: {\n            elementType: \"email\",\n            elementConfig: {\n                type: \"email\",\n                placeholder: \"tanakataro@rebase.co.jp\",\n                label: \"メールアドレス\",\n            },\n            value: \"\",\n        },\n        Password: {\n            elementType: \"password\",\n            elementConfig: {\n                type: \"password\",\n                placeholder: \"qwerty\",\n                label: \"パスワード\",\n            },\n            value: \"\",\n        },\n        checkbox: {\n            elementType: \"checkbox\",\n            elementConfig: {\n                type: \"checkbox\",\n            },\n            value: \"\",\n        },\n    });\n\n    const inputChangedHandler = (event: KeyboardEvent, controlName: string) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: (event.target as HTMLInputElement).value,\n                valid: authForm[controlName].validation,\n                id: controlName,\n            },\n        };\n        setAuthForm(updatedControls);\n    };\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key],\n        });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n        <React.Fragment key={formElement.id}>\n            <Input\n                rowkey={formElement.id}\n                namevalid={Namevalid}\n                emailvalid={Emailvalid}\n                passwordvalid={Passwordvalid}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(event: KeyboardEvent) =>\n                    inputChangedHandler(event, formElement.id)\n                }\n            />\n        </React.Fragment>\n    ));\n\n    let user = firebase.auth().currentUser;\n\n    const submit = (e: React.FormEvent<HTMLFormElement>) => {\n        authForm.ComapanyName.value === \"\"\n            ? setNamevalid(true)\n            : setNamevalid(false);\n        authForm.Email.value === \"\" ? setEmailvalid(true) : setEmailvalid(false);\n        authForm.Password.value === \"\"\n            ? setPasswordvalid(true)\n            : setPasswordvalid(false);\n        setLoading(true);\n        e.preventDefault();\n\n        const email = authForm.Email.value;\n        const password = authForm.Password.value;\n        const name = authForm.ComapanyName.value;\n        firebase\n            .auth()\n            .createUserWithEmailAndPassword(email, password)\n            .then((res: any) => {\n                user = firebase.auth().currentUser;\n                var initIcon =\n                    \"https://storage.googleapis.com/rebase-1/card-NoImage.png\";\n\n                window.localStorage.setItem(\"id\", res.user.uid);\n\n                user\n                    ?.updateProfile({\n                        displayName: name,\n                        photoURL: initIcon,\n                    })\n                        .then(() => {\n                            firebase\n                                .auth()\n                                .currentUser ?.getIdToken()\n                                    .then((idToken: any) => {\n                                        const Mytoken = idToken;\n\n                                        return profile\n                                            .fetchProfile(Mytoken, name, email)\n                                            .then((res) => {\n                                                account.setProfileRegistered(true);\n                                                history.push(\"/tags\");\n                                            });\n                                    })\n                                    .catch((err) => {\n                                        console.log(err);\n                                    });\n                        });\n            })\n            .catch((err: any) => {\n                setLoading(false);\n                Seterr(\"新規登録に失敗しました\");\n            });\n    };\n    return <Account form={form} submit={submit} Loading={Loading} err={err} />;\n};\n\nexport default AccountCreation;\n"]},"metadata":{},"sourceType":"module"}