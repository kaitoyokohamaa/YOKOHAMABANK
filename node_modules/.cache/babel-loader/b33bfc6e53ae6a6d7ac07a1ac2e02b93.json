{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/mybank/src/components/pages/Signup/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../../atoms/Input/Input\";\nimport \"./Account.css\";\nimport Account from \"./AccuntCreationComponent\";\nimport * as firebase from \"firebase/app\";\n\nconst Index = () => {\n  const history = useHistory();\n  const [err, Seterr] = useState(\"\");\n  const [authForm, setAuthForm] = useState({\n    ComapanyName: {\n      elementType: \"comapanyname\",\n      elementConfig: {\n        type: \"input\",\n        placeholder: \"株式会社AilaB\",\n        label: \"会社名\"\n      },\n      value: \"\"\n    },\n    Email: {\n      elementType: \"email\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"tanakataro@rebase.co.jp\",\n        label: \"メールアドレス\"\n      },\n      value: \"\"\n    },\n    Password: {\n      elementType: \"password\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"qwerty\",\n        label: \"パスワード\"\n      },\n      value: \"\"\n    },\n    checkbox: {\n      elementType: \"checkbox\",\n      elementConfig: {\n        type: \"checkbox\"\n      },\n      value: \"\"\n    }\n  });\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: authForm[controlName].validation,\n        id: controlName\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: formElement.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    rowkey: formElement.id,\n    namevalid: Namevalid,\n    emailvalid: Emailvalid,\n    passwordvalid: Passwordvalid,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })));\n\n  const submit = e => {\n    e.preventDefault();\n    const email = authForm.Email.value;\n    const password = authForm.Password.value;\n    const name = authForm.ComapanyName.value;\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(res => {\n      history.push(\"/\");\n    }).catch(err => {\n      Seterr(\"新規登録に失敗しました\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Account, {\n    form: form,\n    submit: submit,\n    err: err,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/mybank/src/components/pages/Signup/index.tsx"],"names":["React","useState","useHistory","Input","Account","firebase","Index","history","err","Seterr","authForm","setAuthForm","ComapanyName","elementType","elementConfig","type","placeholder","label","value","Email","Password","checkbox","inputChangedHandler","event","controlName","updatedControls","target","valid","validation","id","formElementsArray","key","push","config","form","map","formElement","Namevalid","Emailvalid","Passwordvalid","submit","e","preventDefault","email","password","name","auth","createUserWithEmailAndPassword","then","res","catch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../../atoms/Input/Input\";\nimport \"./Account.css\";\nimport Account from \"./AccuntCreationComponent\";\nimport * as firebase from \"firebase/app\";\n\n\nconst Index: React.FC = () => {\n    const history = useHistory();\n    const [err, Seterr] = useState(\"\");\n    const [authForm, setAuthForm] = useState({\n        ComapanyName: {\n            elementType: \"comapanyname\",\n            elementConfig: {\n                type: \"input\",\n                placeholder: \"株式会社AilaB\",\n                label: \"会社名\",\n            },\n            value: \"\",\n        },\n        Email: {\n            elementType: \"email\",\n            elementConfig: {\n                type: \"email\",\n                placeholder: \"tanakataro@rebase.co.jp\",\n                label: \"メールアドレス\",\n            },\n            value: \"\",\n        },\n        Password: {\n            elementType: \"password\",\n            elementConfig: {\n                type: \"password\",\n                placeholder: \"qwerty\",\n                label: \"パスワード\",\n            },\n            value: \"\",\n        },\n        checkbox: {\n            elementType: \"checkbox\",\n            elementConfig: {\n                type: \"checkbox\",\n            },\n            value: \"\",\n        },\n    });\n\n    const inputChangedHandler = (event: KeyboardEvent, controlName: string) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: (event.target as HTMLInputElement).value,\n                valid: authForm[controlName].validation,\n                id: controlName,\n            },\n        };\n        setAuthForm(updatedControls);\n    };\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key],\n        });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n        <React.Fragment key={formElement.id}>\n            <Input\n                rowkey={formElement.id}\n                namevalid={Namevalid}\n                emailvalid={Emailvalid}\n                passwordvalid={Passwordvalid}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(event: KeyboardEvent) =>\n                    inputChangedHandler(event, formElement.id)\n                }\n            />\n        </React.Fragment>\n    ));\n\n\n\n    const submit = (e: React.FormEvent<HTMLFormElement>) => {\n\n        e.preventDefault();\n\n        const email = authForm.Email.value;\n        const password = authForm.Password.value;\n        const name = authForm.ComapanyName.value;\n        firebase\n            .auth()\n            .createUserWithEmailAndPassword(email, password)\n            .then((res: any) => {\n                history.push(\"/\")\n            })\n            .catch((err: any) => {\n                Seterr(\"新規登録に失敗しました\");\n            });\n    };\n    return <Account form={form} submit={submit} err={err} />;\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}