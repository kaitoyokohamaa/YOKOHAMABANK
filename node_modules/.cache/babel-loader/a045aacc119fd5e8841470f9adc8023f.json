{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/mybank/src/contexts/Authcontexts/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { app } from \"../../firebase\"; // contextの作成\n\nexport const AuthContext = React.createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  const [currentUser, setCurrentUser] = useState(null); // ユーザーをログインさせる関数\n\n  const login = async (email, password, history) => {\n    try {\n      await app.auth().signInWithEmailAndPassword(email, password);\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  }; // 新しいユーザーを作成しログインさせる関数\n\n\n  const signup = async (email, password, history) => {\n    try {\n      await app.auth().createUserWithEmailAndPassword(email, password);\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    app.auth().onAuthStateChanged(setCurrentUser);\n  }, []);\n  return (\n    /*#__PURE__*/\n    // Contextを使用して認証に必要な情報をコンポーネントツリーに流し込む。\n    React.createElement(AuthContext.Provider, {\n      value: {\n        login: login,\n        signup: signup,\n        currentUser\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, children)\n  );\n};","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/mybank/src/contexts/Authcontexts/index.tsx"],"names":["React","useEffect","useState","app","AuthContext","createContext","AuthProvider","children","currentUser","setCurrentUser","login","email","password","history","auth","signInWithEmailAndPassword","push","error","alert","signup","createUserWithEmailAndPassword","onAuthStateChanged"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,gBAApB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAN,EAApB;AAEP,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC1C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C,CAD0C,CAG1C;;AACA,QAAMQ,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwBC,OAAxB,KAAoC;AAC9C,QAAI;AACA,YAAMV,GAAG,CAACW,IAAJ,GAAWC,0BAAX,CAAsCJ,KAAtC,EAA6CC,QAA7C,CAAN;AACAC,MAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GAPD,CAJ0C,CAa1C;;;AACA,QAAME,MAAM,GAAG,OAAOR,KAAP,EAAcC,QAAd,EAAwBC,OAAxB,KAAoC;AAC/C,QAAI;AACA,YAAMV,GAAG,CAACW,IAAJ,GAAWM,8BAAX,CAA0CT,KAA1C,EAAiDC,QAAjD,CAAN;AACAC,MAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ,GAPD;;AASAhB,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAACW,IAAJ,GAAWO,kBAAX,CAA8BZ,cAA9B;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA;AAAA;AACI;AACA,wBAAC,WAAD,CAAa,QAAb;AACI,MAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAEA,KADJ;AAEHS,QAAAA,MAAM,EAAEA,MAFL;AAGHX,QAAAA;AAHG,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOKD,QAPL;AAFJ;AAYH,CAvCM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { app } from \"../../firebase\";\n\n// contextの作成\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState(null);\n\n    // ユーザーをログインさせる関数\n    const login = async (email, password, history) => {\n        try {\n            await app.auth().signInWithEmailAndPassword(email, password);\n            history.push(\"/\");\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    // 新しいユーザーを作成しログインさせる関数\n    const signup = async (email, password, history) => {\n        try {\n            await app.auth().createUserWithEmailAndPassword(email, password);\n            history.push(\"/\");\n        } catch (error) {\n            alert(error);\n        }\n    };\n\n    useEffect(() => {\n        app.auth().onAuthStateChanged(setCurrentUser);\n    }, []);\n\n    return (\n        // Contextを使用して認証に必要な情報をコンポーネントツリーに流し込む。\n        <AuthContext.Provider\n            value={{\n                login: login,\n                signup: signup,\n                currentUser\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}