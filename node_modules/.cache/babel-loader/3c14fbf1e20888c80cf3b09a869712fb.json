{"ast":null,"code":"var _jsxFileName = \"/Users/yokohamakaito/Desktop/mybank/src/components/pages/Signup/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../atoms/Input\";\nimport * as firebase from \"firebase/app\";\n\nconst Index = () => {\n  const history = useHistory();\n  const [authForm, setAuthForm] = useState({\n    Email: {\n      elementType: \"email\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"メールアドレス\",\n        label: \"メールアドレス\"\n      },\n      value: \"\"\n    },\n    Password: {\n      elementType: \"password\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"パスワード\",\n        label: \"パスワード\"\n      },\n      value: \"\"\n    }\n  });\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: authForm[controlName].validation,\n        id: controlName\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: formElement.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    rowkey: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })));\n\n  const submit = e => {\n    e.preventDefault();\n    const email = authForm.Email.value;\n    const password = authForm.Password.value;\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(res => {\n      history.push(\"/\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"\\u65B0\\u898F\\u767B\\u9332\")));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/mybank/src/components/pages/Signup/index.tsx"],"names":["React","useState","useHistory","Input","firebase","Index","history","authForm","setAuthForm","Email","elementType","elementConfig","type","placeholder","label","value","Password","inputChangedHandler","event","controlName","updatedControls","target","valid","validation","id","formElementsArray","key","push","config","form","map","formElement","submit","e","preventDefault","email","password","auth","createUserWithEmailAndPassword","then","res","catch","err","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B;;AAEA,MAAMC,KAAe,GAAG,MAAM;AAC1B,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACrCQ,IAAAA,KAAK,EAAE;AACHC,MAAAA,WAAW,EAAE,OADV;AAEHC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,OADK;AAEXC,QAAAA,WAAW,EAAE,SAFF;AAGXC,QAAAA,KAAK,EAAE;AAHI,OAFZ;AAOHC,MAAAA,KAAK,EAAE;AAPJ,KAD8B;AAUrCC,IAAAA,QAAQ,EAAE;AACNN,MAAAA,WAAW,EAAE,UADP;AAENC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,UADK;AAEXC,QAAAA,WAAW,EAAE,OAFF;AAGXC,QAAAA,KAAK,EAAE;AAHI,OAFT;AAONC,MAAAA,KAAK,EAAE;AAPD;AAV2B,GAAD,CAAxC;;AAqBA,QAAME,mBAAmB,GAAG,CAACC,KAAD,EAAuBC,WAAvB,KAA+C;AACvE,UAAMC,eAAe,GAAG,EACpB,GAAGb,QADiB;AAEpB,OAACY,WAAD,GAAe,EACX,GAAGZ,QAAQ,CAACY,WAAD,CADA;AAEXJ,QAAAA,KAAK,EAAGG,KAAK,CAACG,MAAP,CAAmCN,KAF/B;AAGXO,QAAAA,KAAK,EAAEf,QAAQ,CAACY,WAAD,CAAR,CAAsBI,UAHlB;AAIXC,QAAAA,EAAE,EAAEL;AAJO;AAFK,KAAxB;AASAX,IAAAA,WAAW,CAACY,eAAD,CAAX;AACH,GAXD;;AAaA,QAAMK,iBAAiB,GAAG,EAA1B;;AACA,OAAK,IAAIC,GAAT,IAAgBnB,QAAhB,EAA0B;AACtBkB,IAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBH,MAAAA,EAAE,EAAEE,GADe;AAEnBE,MAAAA,MAAM,EAAErB,QAAQ,CAACmB,GAAD;AAFG,KAAvB;AAIH;;AAED,MAAIG,IAAI,GAAGJ,iBAAiB,CAACK,GAAlB,CAAuBC,WAAD,iBAC7B,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAEA,WAAW,CAACP,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AACI,IAAA,MAAM,EAAEO,WAAW,CAACP,EADxB;AAGI,IAAA,WAAW,EAAEO,WAAW,CAACH,MAAZ,CAAmBlB,WAHpC;AAII,IAAA,aAAa,EAAEqB,WAAW,CAACH,MAAZ,CAAmBjB,aAJtC;AAKI,IAAA,KAAK,EAAEoB,WAAW,CAACH,MAAZ,CAAmBb,KAL9B;AAMI,IAAA,OAAO,EAAGG,KAAD,IACLD,mBAAmB,CAACC,KAAD,EAAQa,WAAW,CAACP,EAApB,CAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADO,CAAX;;AAiBA,QAAMQ,MAAM,GAAIC,CAAD,IAAyC;AAEpDA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,KAAK,GAAG5B,QAAQ,CAACE,KAAT,CAAeM,KAA7B;AACA,UAAMqB,QAAQ,GAAG7B,QAAQ,CAACS,QAAT,CAAkBD,KAAnC;AAEAX,IAAAA,QAAQ,CACHiC,IADL,GAEKC,8BAFL,CAEoCH,KAFpC,EAE2CC,QAF3C,EAGKG,IAHL,CAGWC,GAAD,IAAc;AAChBlC,MAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACH,KALL,EAMKc,KANL,CAMYC,GAAD,IAAc;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KARL;AASH,GAhBD;;AAiBA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,QAAQ,EAAEV,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,IADL,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFJ,CADJ,CADJ;AAQH,CAtFD;;AAwFA,eAAexB,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Input from \"../../atoms/Input\";\nimport * as firebase from \"firebase/app\";\n\nconst Index: React.FC = () => {\n    const history = useHistory();\n    const [authForm, setAuthForm] = useState({\n        Email: {\n            elementType: \"email\",\n            elementConfig: {\n                type: \"email\",\n                placeholder: \"メールアドレス\",\n                label: \"メールアドレス\",\n            },\n            value: \"\",\n        },\n        Password: {\n            elementType: \"password\",\n            elementConfig: {\n                type: \"password\",\n                placeholder: \"パスワード\",\n                label: \"パスワード\",\n            },\n            value: \"\",\n        },\n    });\n\n    const inputChangedHandler = (event: KeyboardEvent, controlName: string) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: (event.target as HTMLInputElement).value,\n                valid: authForm[controlName].validation,\n                id: controlName,\n            },\n        };\n        setAuthForm(updatedControls);\n    };\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key],\n        });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n        <React.Fragment key={formElement.id}>\n            <Input\n                rowkey={formElement.id}\n\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(event: KeyboardEvent) =>\n                    inputChangedHandler(event, formElement.id)\n                }\n            />\n        </React.Fragment>\n    ));\n\n\n\n    const submit = (e: React.FormEvent<HTMLFormElement>) => {\n\n        e.preventDefault();\n\n        const email = authForm.Email.value;\n        const password = authForm.Password.value;\n\n        firebase\n            .auth()\n            .createUserWithEmailAndPassword(email, password)\n            .then((res: any) => {\n                history.push(\"/\")\n            })\n            .catch((err: any) => {\n                console.log(err)\n            });\n    };\n    return (\n        <div>\n            <form onSubmit={submit} >\n                {form}\n                <button>新規登録</button>\n            </form>\n        </div>\n    );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}